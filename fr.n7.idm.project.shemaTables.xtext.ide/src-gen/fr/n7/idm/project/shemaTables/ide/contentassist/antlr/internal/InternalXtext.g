/*
 * generated by Xtext 2.32.0
 */
grammar InternalXtext;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.n7.idm.project.shemaTables.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.n7.idm.project.shemaTables.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.n7.idm.project.shemaTables.services.XtextGrammarAccess;

}
@parser::members {
	private XtextGrammarAccess grammarAccess;

	public void setGrammarAccess(XtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTables
entryRuleTables
:
{ before(grammarAccess.getTablesRule()); }
	 ruleTables
{ after(grammarAccess.getTablesRule()); } 
	 EOF 
;

// Rule Tables
ruleTables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTablesAccess().getGroup()); }
		(rule__Tables__Group__0)
		{ after(grammarAccess.getTablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShemaTable
entryRuleShemaTable
:
{ before(grammarAccess.getShemaTableRule()); }
	 ruleShemaTable
{ after(grammarAccess.getShemaTableRule()); } 
	 EOF 
;

// Rule ShemaTable
ruleShemaTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShemaTableAccess().getGroup()); }
		(rule__ShemaTable__Group__0)
		{ after(grammarAccess.getShemaTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCatalogue
entryRuleCatalogue
:
{ before(grammarAccess.getCatalogueRule()); }
	 ruleCatalogue
{ after(grammarAccess.getCatalogueRule()); } 
	 EOF 
;

// Rule Catalogue
ruleCatalogue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCatalogueAccess().getGroup()); }
		(rule__Catalogue__Group__0)
		{ after(grammarAccess.getCatalogueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm
:
{ before(grammarAccess.getAlgorithmRule()); }
	 ruleAlgorithm
{ after(grammarAccess.getAlgorithmRule()); } 
	 EOF 
;

// Rule Algorithm
ruleAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmAccess().getGroup()); }
		(rule__Algorithm__Group__0)
		{ after(grammarAccess.getAlgorithmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getGroup()); }
		(rule__Constant__Group__0)
		{ after(grammarAccess.getConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ColumnDataType
ruleColumnDataType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDataTypeAccess().getAlternatives()); }
		(rule__ColumnDataType__Alternatives)
		{ after(grammarAccess.getColumnDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDataTypeAccess().getIntEnumLiteralDeclaration_0()); }
		('int')
		{ after(grammarAccess.getColumnDataTypeAccess().getIntEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getColumnDataTypeAccess().getFloatEnumLiteralDeclaration_1()); }
		('float')
		{ after(grammarAccess.getColumnDataTypeAccess().getFloatEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getColumnDataTypeAccess().getStringEnumLiteralDeclaration_2()); }
		('string')
		{ after(grammarAccess.getColumnDataTypeAccess().getStringEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tables__Group__0__Impl
	rule__Tables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTablesAccess().getTablesKeyword_0()); }
	'Tables'
	{ after(grammarAccess.getTablesAccess().getTablesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tables__Group__1__Impl
	rule__Tables__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTablesAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getTablesAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tables__Group__2__Impl
	rule__Tables__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTablesAccess().getShematablesKeyword_2()); }
	'shematables'
	{ after(grammarAccess.getTablesAccess().getShematablesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tables__Group__3__Impl
	rule__Tables__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTablesAccess().getShematablesAssignment_3()); }
	(rule__Tables__ShematablesAssignment_3)*
	{ after(grammarAccess.getTablesAccess().getShematablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tables__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTablesAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTablesAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShemaTable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__0__Impl
	rule__ShemaTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getShemaTableKeyword_0()); }
	'ShemaTable'
	{ after(grammarAccess.getShemaTableAccess().getShemaTableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__1__Impl
	rule__ShemaTable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getShemaTableAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__2__Impl
	rule__ShemaTable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getNameKeyword_2()); }
	'name'
	{ after(grammarAccess.getShemaTableAccess().getNameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__3__Impl
	rule__ShemaTable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getNameAssignment_3()); }
	(rule__ShemaTable__NameAssignment_3)
	{ after(grammarAccess.getShemaTableAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__4__Impl
	rule__ShemaTable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getIdKeyword_4()); }
	'id'
	{ after(grammarAccess.getShemaTableAccess().getIdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__5__Impl
	rule__ShemaTable__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getIdAssignment_5()); }
	(rule__ShemaTable__IdAssignment_5)
	{ after(grammarAccess.getShemaTableAccess().getIdAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__6__Impl
	rule__ShemaTable__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getColumnsKeyword_6()); }
	'columns'
	{ after(grammarAccess.getShemaTableAccess().getColumnsKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__7__Impl
	rule__ShemaTable__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getColumnsAssignment_7()); }
	(rule__ShemaTable__ColumnsAssignment_7)*
	{ after(grammarAccess.getShemaTableAccess().getColumnsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__8__Impl
	rule__ShemaTable__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getCatalogueKeyword_8()); }
	'catalogue'
	{ after(grammarAccess.getShemaTableAccess().getCatalogueKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__9__Impl
	rule__ShemaTable__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getCatalogueAssignment_9()); }
	(rule__ShemaTable__CatalogueAssignment_9)
	{ after(grammarAccess.getShemaTableAccess().getCatalogueAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShemaTable__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShemaTableAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getShemaTableAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
	'Column'
	{ after(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getColumnAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameKeyword_2()); }
	'name'
	{ after(grammarAccess.getColumnAccess().getNameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
	rule__Column__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameAssignment_3()); }
	(rule__Column__NameAssignment_3)
	{ after(grammarAccess.getColumnAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__4__Impl
	rule__Column__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getIdKeyword_4()); }
	'id'
	{ after(grammarAccess.getColumnAccess().getIdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__5__Impl
	rule__Column__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getIdAssignment_5()); }
	(rule__Column__IdAssignment_5)
	{ after(grammarAccess.getColumnAccess().getIdAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__6__Impl
	rule__Column__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getDataTypeKeyword_6()); }
	'dataType'
	{ after(grammarAccess.getColumnAccess().getDataTypeKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__7__Impl
	rule__Column__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getDataTypeAssignment_7()); }
	(rule__Column__DataTypeAssignment_7)
	{ after(grammarAccess.getColumnAccess().getDataTypeAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__8__Impl
	rule__Column__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getConstraintKeyword_8()); }
	'constraint'
	{ after(grammarAccess.getColumnAccess().getConstraintKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__9__Impl
	rule__Column__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getConstraintAssignment_9()); }
	(rule__Column__ConstraintAssignment_9)
	{ after(grammarAccess.getColumnAccess().getConstraintAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getColumnAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
	'Constraint'
	{ after(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFilePathKeyword_2()); }
	'filePath'
	{ after(grammarAccess.getConstraintAccess().getFilePathKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__3__Impl
	rule__Constraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFilePathAssignment_3()); }
	(rule__Constraint__FilePathAssignment_3)
	{ after(grammarAccess.getConstraintAccess().getFilePathAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Catalogue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__0__Impl
	rule__Catalogue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getCatalogueKeyword_0()); }
	'Catalogue'
	{ after(grammarAccess.getCatalogueAccess().getCatalogueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__1__Impl
	rule__Catalogue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCatalogueAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__2__Impl
	rule__Catalogue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getNameKeyword_2()); }
	'name'
	{ after(grammarAccess.getCatalogueAccess().getNameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__3__Impl
	rule__Catalogue__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getNameAssignment_3()); }
	(rule__Catalogue__NameAssignment_3)
	{ after(grammarAccess.getCatalogueAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__4__Impl
	rule__Catalogue__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getAlgorithmsKeyword_4()); }
	'algorithms'
	{ after(grammarAccess.getCatalogueAccess().getAlgorithmsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__5__Impl
	rule__Catalogue__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getAlgorithmsAssignment_5()); }
	(rule__Catalogue__AlgorithmsAssignment_5)*
	{ after(grammarAccess.getCatalogueAccess().getAlgorithmsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Catalogue__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCatalogueAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getCatalogueAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algorithm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__0__Impl
	rule__Algorithm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0()); }
	'Algorithm'
	{ after(grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__1__Impl
	rule__Algorithm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAlgorithmAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__2__Impl
	rule__Algorithm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getNameKeyword_2()); }
	'name'
	{ after(grammarAccess.getAlgorithmAccess().getNameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__3__Impl
	rule__Algorithm__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getNameAssignment_3()); }
	(rule__Algorithm__NameAssignment_3)
	{ after(grammarAccess.getAlgorithmAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__4__Impl
	rule__Algorithm__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getPathKeyword_4()); }
	'path'
	{ after(grammarAccess.getAlgorithmAccess().getPathKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__5__Impl
	rule__Algorithm__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getPathAssignment_5()); }
	(rule__Algorithm__PathAssignment_5)
	{ after(grammarAccess.getAlgorithmAccess().getPathAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__6__Impl
	rule__Algorithm__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getOutputKeyword_6()); }
	'output'
	{ after(grammarAccess.getAlgorithmAccess().getOutputKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__7__Impl
	rule__Algorithm__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getOutputAssignment_7()); }
	(rule__Algorithm__OutputAssignment_7)
	{ after(grammarAccess.getAlgorithmAccess().getOutputAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__8__Impl
	rule__Algorithm__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getInputKeyword_8()); }
	'input'
	{ after(grammarAccess.getAlgorithmAccess().getInputKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__9__Impl
	rule__Algorithm__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getInputAssignment_9()); }
	(rule__Algorithm__InputAssignment_9)
	{ after(grammarAccess.getAlgorithmAccess().getInputAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getAlgorithmAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputKeyword_0()); }
	'Input'
	{ after(grammarAccess.getInputAccess().getInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getInputAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getConstanteKeyword_2()); }
	'constante'
	{ after(grammarAccess.getInputAccess().getConstanteKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__3__Impl
	rule__Input__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getConstanteAssignment_3()); }
	(rule__Input__ConstanteAssignment_3)
	{ after(grammarAccess.getInputAccess().getConstanteAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__4__Impl
	rule__Input__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getColumnsKeyword_4()); }
	'columns'
	{ after(grammarAccess.getInputAccess().getColumnsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__5__Impl
	rule__Input__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getColumnsAssignment_5()); }
	(rule__Input__ColumnsAssignment_5)*
	{ after(grammarAccess.getInputAccess().getColumnsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getInputAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputKeyword_0()); }
	'Output'
	{ after(grammarAccess.getOutputAccess().getOutputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
	rule__Output__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__2__Impl
	rule__Output__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getNameKeyword_2()); }
	'name'
	{ after(grammarAccess.getOutputAccess().getNameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__3__Impl
	rule__Output__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getNameAssignment_3()); }
	(rule__Output__NameAssignment_3)
	{ after(grammarAccess.getOutputAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__4__Impl
	rule__Output__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getIdKeyword_4()); }
	'id'
	{ after(grammarAccess.getOutputAccess().getIdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__5__Impl
	rule__Output__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getIdAssignment_5()); }
	(rule__Output__IdAssignment_5)
	{ after(grammarAccess.getOutputAccess().getIdAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__6__Impl
	rule__Output__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getDataTypeKeyword_6()); }
	'dataType'
	{ after(grammarAccess.getOutputAccess().getDataTypeKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__7__Impl
	rule__Output__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getDataTypeAssignment_7()); }
	(rule__Output__DataTypeAssignment_7)
	{ after(grammarAccess.getOutputAccess().getDataTypeAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__8__Impl
	rule__Output__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getConstraintKeyword_8()); }
	'constraint'
	{ after(grammarAccess.getOutputAccess().getConstraintKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__9__Impl
	rule__Output__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getConstraintAssignment_9()); }
	(rule__Output__ConstraintAssignment_9)
	{ after(grammarAccess.getOutputAccess().getConstraintAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getConstantKeyword_0()); }
	'Constant'
	{ after(grammarAccess.getConstantAccess().getConstantKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getConstantAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getValueKeyword_2()); }
	'value'
	{ after(grammarAccess.getConstantAccess().getValueKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__3__Impl
	rule__Constant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getValueAssignment_3()); }
	(rule__Constant__ValueAssignment_3)
	{ after(grammarAccess.getConstantAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getConstantAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__ShematablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTablesAccess().getShematablesShemaTableParserRuleCall_3_0()); }
		ruleShemaTable
		{ after(grammarAccess.getTablesAccess().getShematablesShemaTableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShemaTableAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getShemaTableAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__IdAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShemaTableAccess().getIdINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getShemaTableAccess().getIdINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__ColumnsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShemaTableAccess().getColumnsColumnParserRuleCall_7_0()); }
		ruleColumn
		{ after(grammarAccess.getShemaTableAccess().getColumnsColumnParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShemaTable__CatalogueAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShemaTableAccess().getCatalogueCatalogueParserRuleCall_9_0()); }
		ruleCatalogue
		{ after(grammarAccess.getShemaTableAccess().getCatalogueCatalogueParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__IdAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getIdINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getColumnAccess().getIdINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__DataTypeAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getDataTypeColumnDataTypeEnumRuleCall_7_0()); }
		ruleColumnDataType
		{ after(grammarAccess.getColumnAccess().getDataTypeColumnDataTypeEnumRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__ConstraintAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getConstraintConstraintParserRuleCall_9_0()); }
		ruleConstraint
		{ after(grammarAccess.getColumnAccess().getConstraintConstraintParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__FilePathAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getFilePathSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstraintAccess().getFilePathSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCatalogueAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getCatalogueAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Catalogue__AlgorithmsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCatalogueAccess().getAlgorithmsAlgorithmParserRuleCall_5_0()); }
		ruleAlgorithm
		{ after(grammarAccess.getCatalogueAccess().getAlgorithmsAlgorithmParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__PathAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getPathSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getAlgorithmAccess().getPathSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__OutputAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getOutputOutputParserRuleCall_7_0()); }
		ruleOutput
		{ after(grammarAccess.getAlgorithmAccess().getOutputOutputParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__InputAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getInputInputParserRuleCall_9_0()); }
		ruleInput
		{ after(grammarAccess.getAlgorithmAccess().getInputInputParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__ConstanteAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getConstanteConstantParserRuleCall_3_0()); }
		ruleConstant
		{ after(grammarAccess.getInputAccess().getConstanteConstantParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__ColumnsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getColumnsColumnCrossReference_5_0()); }
		(
			{ before(grammarAccess.getInputAccess().getColumnsColumnIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInputAccess().getColumnsColumnIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getInputAccess().getColumnsColumnCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getOutputAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__IdAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getIdINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getOutputAccess().getIdINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__DataTypeAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getDataTypeColumnDataTypeEnumRuleCall_7_0()); }
		ruleColumnDataType
		{ after(grammarAccess.getOutputAccess().getDataTypeColumnDataTypeEnumRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__ConstraintAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getConstraintConstraintParserRuleCall_9_0()); }
		ruleConstraint
		{ after(grammarAccess.getOutputAccess().getConstraintConstraintParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
