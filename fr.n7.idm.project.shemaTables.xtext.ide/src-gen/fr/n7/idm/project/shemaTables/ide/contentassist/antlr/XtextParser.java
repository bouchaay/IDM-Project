/*
 * generated by Xtext 2.32.0
 */
package fr.n7.idm.project.shemaTables.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.idm.project.shemaTables.ide.contentassist.antlr.internal.InternalXtextParser;
import fr.n7.idm.project.shemaTables.services.XtextGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XtextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XtextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XtextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColumnDataTypeAccess().getAlternatives(), "rule__ColumnDataType__Alternatives");
			builder.put(grammarAccess.getTablesAccess().getGroup(), "rule__Tables__Group__0");
			builder.put(grammarAccess.getShemaTableAccess().getGroup(), "rule__ShemaTable__Group__0");
			builder.put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
			builder.put(grammarAccess.getReferencedColumnAccess().getGroup(), "rule__ReferencedColumn__Group__0");
			builder.put(grammarAccess.getDerivedColumnAccess().getGroup(), "rule__DerivedColumn__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getCatalogueAccess().getGroup(), "rule__Catalogue__Group__0");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup(), "rule__Algorithm__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
			builder.put(grammarAccess.getTablesAccess().getShematablesAssignment_3(), "rule__Tables__ShematablesAssignment_3");
			builder.put(grammarAccess.getShemaTableAccess().getNameAssignment_3(), "rule__ShemaTable__NameAssignment_3");
			builder.put(grammarAccess.getShemaTableAccess().getIdAssignment_5(), "rule__ShemaTable__IdAssignment_5");
			builder.put(grammarAccess.getShemaTableAccess().getColumnsAssignment_7(), "rule__ShemaTable__ColumnsAssignment_7");
			builder.put(grammarAccess.getShemaTableAccess().getCatalogueAssignment_9(), "rule__ShemaTable__CatalogueAssignment_9");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment_3(), "rule__Column__NameAssignment_3");
			builder.put(grammarAccess.getColumnAccess().getIdAssignment_5(), "rule__Column__IdAssignment_5");
			builder.put(grammarAccess.getColumnAccess().getDataTypeAssignment_7(), "rule__Column__DataTypeAssignment_7");
			builder.put(grammarAccess.getColumnAccess().getConstraintAssignment_9(), "rule__Column__ConstraintAssignment_9");
			builder.put(grammarAccess.getReferencedColumnAccess().getNameAssignment_3(), "rule__ReferencedColumn__NameAssignment_3");
			builder.put(grammarAccess.getReferencedColumnAccess().getIdAssignment_5(), "rule__ReferencedColumn__IdAssignment_5");
			builder.put(grammarAccess.getReferencedColumnAccess().getDataTypeAssignment_7(), "rule__ReferencedColumn__DataTypeAssignment_7");
			builder.put(grammarAccess.getReferencedColumnAccess().getConstraintAssignment_9(), "rule__ReferencedColumn__ConstraintAssignment_9");
			builder.put(grammarAccess.getReferencedColumnAccess().getForeignTableAssignment_11(), "rule__ReferencedColumn__ForeignTableAssignment_11");
			builder.put(grammarAccess.getReferencedColumnAccess().getForeignColumnAssignment_13(), "rule__ReferencedColumn__ForeignColumnAssignment_13");
			builder.put(grammarAccess.getDerivedColumnAccess().getNameAssignment_3(), "rule__DerivedColumn__NameAssignment_3");
			builder.put(grammarAccess.getDerivedColumnAccess().getIdAssignment_5(), "rule__DerivedColumn__IdAssignment_5");
			builder.put(grammarAccess.getDerivedColumnAccess().getDataTypeAssignment_7(), "rule__DerivedColumn__DataTypeAssignment_7");
			builder.put(grammarAccess.getDerivedColumnAccess().getConstraintAssignment_9(), "rule__DerivedColumn__ConstraintAssignment_9");
			builder.put(grammarAccess.getDerivedColumnAccess().getAlgorithmAssignment_11(), "rule__DerivedColumn__AlgorithmAssignment_11");
			builder.put(grammarAccess.getDerivedColumnAccess().getOutputColumnAssignment_13(), "rule__DerivedColumn__OutputColumnAssignment_13");
			builder.put(grammarAccess.getConstraintAccess().getFilePathAssignment_3(), "rule__Constraint__FilePathAssignment_3");
			builder.put(grammarAccess.getCatalogueAccess().getNameAssignment_3(), "rule__Catalogue__NameAssignment_3");
			builder.put(grammarAccess.getCatalogueAccess().getAlgorithmsAssignment_5(), "rule__Catalogue__AlgorithmsAssignment_5");
			builder.put(grammarAccess.getAlgorithmAccess().getNameAssignment_3(), "rule__Algorithm__NameAssignment_3");
			builder.put(grammarAccess.getAlgorithmAccess().getPathAssignment_5(), "rule__Algorithm__PathAssignment_5");
			builder.put(grammarAccess.getAlgorithmAccess().getOutputAssignment_7(), "rule__Algorithm__OutputAssignment_7");
			builder.put(grammarAccess.getAlgorithmAccess().getInputAssignment_9(), "rule__Algorithm__InputAssignment_9");
			builder.put(grammarAccess.getInputAccess().getConstanteAssignment_3(), "rule__Input__ConstanteAssignment_3");
			builder.put(grammarAccess.getInputAccess().getColumnsAssignment_5(), "rule__Input__ColumnsAssignment_5");
			builder.put(grammarAccess.getOutputAccess().getNameAssignment_3(), "rule__Output__NameAssignment_3");
			builder.put(grammarAccess.getOutputAccess().getIdAssignment_5(), "rule__Output__IdAssignment_5");
			builder.put(grammarAccess.getOutputAccess().getDataTypeAssignment_7(), "rule__Output__DataTypeAssignment_7");
			builder.put(grammarAccess.getOutputAccess().getConstraintAssignment_9(), "rule__Output__ConstraintAssignment_9");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_3(), "rule__Constant__ValueAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XtextGrammarAccess grammarAccess;

	@Override
	protected InternalXtextParser createParser() {
		InternalXtextParser result = new InternalXtextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XtextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
