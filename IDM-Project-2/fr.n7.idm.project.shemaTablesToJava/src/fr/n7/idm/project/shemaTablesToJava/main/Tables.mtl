[comment encoding = UTF-8 /]
[module Tables('http://shematables')]


[template public Tables(aTables : Tables)]
[comment @main/]
[file ('Tables.Java', false, 'UTF-8')]

package mainPackage;
import shemaTableElements.*;

public class TableApplication {

	public static void main(String['['/]] args) {
		
		[let tables : OrderedSet(ShemaTable) = aTables.shematables]
		[for (aShemaTable : ShemaTable | tables)]

		[comment Catalogue vide pour la table /]
		// Catalogue de la table
		Catalogue catalogue = new Catalogue("[aShemaTable.catalogue.name/]");

		[comment Récupérer les algorithmes /]
		[let algorithmes : OrderedSet(Algorithm) = aShemaTable.catalogue.algorithms]

		[comment Parcourir les colonnes du modèle /]
 		[for (algorithme : Algorithm | algorithmes)]

			// L'input de l'algorithme actuel
			[let currentAlgoInput : Input = algorithme.input]

			// La constante de l'input s'il en a
			[if input.constante <> null]
				[let value : Constant = input.constante]
				Constant cons = new Constant([value/]);
				Input input = new Input(cons);
				[/let]
			[else]
				Input input = new Input();
			[/if]

			// Les colonnes de l'input
			[let inputCols : OrderedSet(Column) = input.columns]
				[for (currentCol : Column | inputCols)]
					Constraint currentColConstr = new Constraint("[currentCol.constraint.filePath/]");
					[if currentCol.dataType = ColumnDataType::int]
						currentColumn = new Column<Integer>("[currentCol.name/]", [currentCol.id/], ColumnDataType.INTEGER, currentColConstr);
					[elseif currentCol.dataType = ColumnDataType::float]
						currentColumn = new Column<Float>("[currentCol.name/]", [currentCol.id/], ColumnDataType.FLOAT, currentColConstr);
					[elseif currentCol.dataType = ColumnDataType::string]
						currentColumn = new Column<String>("[currentCol.name/]", [currentCol.id/], ColumnDataType.STRING, currentColConstr);
					[/if]
					input.addColumnToInput(currentColumn);
				[/for]
			[/let]
			[/let]

			// L'output de l'algorithme
			[let currentAlgoOutput : Output = algorithme.output]
				Constraint outputConstr = new Constraint("[currentAlgoOutput.constraint.filePath/]");
				[if currentAlgoOutput.dataType = ColumnDataType::int]
					currentAlgoOutput = new Column<Integer>("[currentAlgoOutput.name/]", [currentAlgoOutput.id/], ColumnDataType.INTEGER, outputConstr);
				[elseif currentAlgoOutput.dataType = ColumnDataType::float]
					currentAlgoOutput = new Column<Float>("[currentAlgoOutput.name/]", [currentAlgoOutput.id/], ColumnDataType.FLOAT, outputConstr);
				[elseif currentAlgoOutput.dataType = ColumnDataType::string]
					currentAlgoOutput = new Column<String>("[currentAlgoOutput.name/]", [currentAlgoOutput.id/], ColumnDataType.STRING, outputConstr);
				[/if]
			[/let]

			// Créer l'algorithme
			Algorithm currentAlgo = new Algorithm(input, currentAlgoOutput, "[algorithme.name/]", "[algorithme.path/]");
			catalogue.addAlgorithm(currentAlgo);
		[/for]
		[/let]
			
		[comment Récupérer les éléments d'identification de la table du modèle/] 
		// La table d'id [aShemaTable.id/]
		ShemaTable table = new ShemaTable("[aShemaTable.name/]", [aShemaTable.id/], catalogue);

		[comment Récupérer les colonnes de la table depuis le modèle /]
		[let colonnes : OrderedSet(Column) = aShemaTable.columns]

		[comment Parcourir les colonnes du modèle /]
 		[for (colonne : Column | colonnes)]

			[comment Fichier des contraintes de la colonnes courante /]
			// Fichier des contraintes de la colonne courante
			Constraint contraintes =  new Constraint("[colonne.constraint.filePath/]");
			
			[comment Parcourir les colonnes du modèle et les ajouter à la table /]
			// Création de la colonne courante d'id [colonne.id/]
			[if colonne.dataType = ColumnDataType::int]
			currentColumn = new Column<Integer>("[colonne.name/]", [colonne.id/], ColumnDataType.INTEGER, contraintes);
			[elseif colonne.dataType = ColumnDataType::float]
			currentColumn = new Column<Float>("[colonne.name/]", [colonne.id/], ColumnDataType.FLOAT, contraintes);
			[elseif colonne.dataType = ColumnDataType::string]
			currentColumn = new Column<String>("[colonne.name/]", [colonne.id/], ColumnDataType.STRING, contraintes);
			[/if]

			[comment Ajouter la colonnne à la table /]
			// Ajouter la colonne d'id [colonne.id/] à la table
			table.addColumn(currentColumn);
		[/for]
		[/let]
		[/for]
		[/let]
	}
}

[/file]
[/template]
