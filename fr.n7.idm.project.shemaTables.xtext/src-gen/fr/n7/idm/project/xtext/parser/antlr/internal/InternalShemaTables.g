/*
 * generated by Xtext 2.32.0
 */
grammar InternalShemaTables;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.n7.idm.project.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.n7.idm.project.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.n7.idm.project.xtext.services.ShemaTablesGrammarAccess;

}

@parser::members {

 	private ShemaTablesGrammarAccess grammarAccess;

    public InternalShemaTablesParser(TokenStream input, ShemaTablesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Tables";
   	}

   	@Override
   	protected ShemaTablesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTables
entryRuleTables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTablesRule()); }
	iv_ruleTables=ruleTables
	{ $current=$iv_ruleTables.current; }
	EOF;

// Rule Tables
ruleTables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Tables'
		{
			newLeafNode(otherlv_0, grammarAccess.getTablesAccess().getTablesKeyword_0());
		}
		(
			(
				lv_name_1_0='Tables'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTablesAccess().getNameTablesKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTablesRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Tables");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTablesAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='shematables'
		{
			newLeafNode(otherlv_3, grammarAccess.getTablesAccess().getShematablesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTablesAccess().getShematablesShemaTableParserRuleCall_4_0());
				}
				lv_shematables_4_0=ruleShemaTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTablesRule());
					}
					add(
						$current,
						"shematables",
						lv_shematables_4_0,
						"fr.n7.idm.project.xtext.ShemaTables.ShemaTable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTablesAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleShemaTable
entryRuleShemaTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShemaTableRule()); }
	iv_ruleShemaTable=ruleShemaTable
	{ $current=$iv_ruleShemaTable.current; }
	EOF;

// Rule ShemaTable
ruleShemaTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ShemaTable'
		{
			newLeafNode(otherlv_0, grammarAccess.getShemaTableAccess().getShemaTableKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getShemaTableAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='name'
		{
			newLeafNode(otherlv_2, grammarAccess.getShemaTableAccess().getNameKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getShemaTableAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShemaTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='id'
		{
			newLeafNode(otherlv_4, grammarAccess.getShemaTableAccess().getIdKeyword_4());
		}
		(
			(
				lv_id_5_0=RULE_INT
				{
					newLeafNode(lv_id_5_0, grammarAccess.getShemaTableAccess().getIdINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShemaTableRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='columns'
		{
			newLeafNode(otherlv_6, grammarAccess.getShemaTableAccess().getColumnsKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShemaTableAccess().getColumnsColumnParserRuleCall_7_0());
				}
				lv_columns_7_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShemaTableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_7_0,
						"fr.n7.idm.project.xtext.ShemaTables.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='catalogue'
		{
			newLeafNode(otherlv_8, grammarAccess.getShemaTableAccess().getCatalogueKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShemaTableAccess().getCatalogueCatalogueParserRuleCall_9_0());
				}
				lv_catalogue_9_0=ruleCatalogue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShemaTableRule());
					}
					set(
						$current,
						"catalogue",
						lv_catalogue_9_0,
						"fr.n7.idm.project.xtext.ShemaTables.Catalogue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getShemaTableAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Column'
		{
			newLeafNode(otherlv_0, grammarAccess.getColumnAccess().getColumnKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='name'
		{
			newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getNameKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='id'
		{
			newLeafNode(otherlv_4, grammarAccess.getColumnAccess().getIdKeyword_4());
		}
		(
			(
				lv_id_5_0=RULE_INT
				{
					newLeafNode(lv_id_5_0, grammarAccess.getColumnAccess().getIdINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='dataType'
		{
			newLeafNode(otherlv_6, grammarAccess.getColumnAccess().getDataTypeKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getDataTypeColumnDataTypeEnumRuleCall_7_0());
				}
				lv_dataType_7_0=ruleColumnDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"dataType",
						lv_dataType_7_0,
						"fr.n7.idm.project.xtext.ShemaTables.ColumnDataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='constraint'
		{
			newLeafNode(otherlv_8, grammarAccess.getColumnAccess().getConstraintKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getConstraintConstraintParserRuleCall_9_0());
				}
				lv_constraint_9_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_9_0,
						"fr.n7.idm.project.xtext.ShemaTables.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getColumnAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Constraint'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getConstraintKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='filePath'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getFilePathKeyword_2());
		}
		(
			(
				lv_filePath_3_0=RULE_STRING
				{
					newLeafNode(lv_filePath_3_0, grammarAccess.getConstraintAccess().getFilePathSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"filePath",
						lv_filePath_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCatalogue
entryRuleCatalogue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCatalogueRule()); }
	iv_ruleCatalogue=ruleCatalogue
	{ $current=$iv_ruleCatalogue.current; }
	EOF;

// Rule Catalogue
ruleCatalogue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Catalogue'
		{
			newLeafNode(otherlv_0, grammarAccess.getCatalogueAccess().getCatalogueKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCatalogueAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='name'
		{
			newLeafNode(otherlv_2, grammarAccess.getCatalogueAccess().getNameKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getCatalogueAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCatalogueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='algorithms'
		{
			newLeafNode(otherlv_4, grammarAccess.getCatalogueAccess().getAlgorithmsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCatalogueAccess().getAlgorithmsAlgorithmParserRuleCall_5_0());
				}
				lv_algorithms_5_0=ruleAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCatalogueRule());
					}
					add(
						$current,
						"algorithms",
						lv_algorithms_5_0,
						"fr.n7.idm.project.xtext.ShemaTables.Algorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCatalogueAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmRule()); }
	iv_ruleAlgorithm=ruleAlgorithm
	{ $current=$iv_ruleAlgorithm.current; }
	EOF;

// Rule Algorithm
ruleAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Algorithm'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlgorithmAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='name'
		{
			newLeafNode(otherlv_2, grammarAccess.getAlgorithmAccess().getNameKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='path'
		{
			newLeafNode(otherlv_4, grammarAccess.getAlgorithmAccess().getPathKeyword_4());
		}
		(
			(
				lv_path_5_0=RULE_STRING
				{
					newLeafNode(lv_path_5_0, grammarAccess.getAlgorithmAccess().getPathSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='output'
		{
			newLeafNode(otherlv_6, grammarAccess.getAlgorithmAccess().getOutputKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getOutputOutputParserRuleCall_7_0());
				}
				lv_output_7_0=ruleOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"output",
						lv_output_7_0,
						"fr.n7.idm.project.xtext.ShemaTables.Output");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='input'
		{
			newLeafNode(otherlv_8, grammarAccess.getAlgorithmAccess().getInputKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getInputInputParserRuleCall_9_0());
				}
				lv_input_9_0=ruleInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"input",
						lv_input_9_0,
						"fr.n7.idm.project.xtext.ShemaTables.Input");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getAlgorithmAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Input'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputAccess().getInputKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='constante'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputAccess().getConstanteKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getConstanteConstantParserRuleCall_3_0());
				}
				lv_constante_3_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"constante",
						lv_constante_3_0,
						"fr.n7.idm.project.xtext.ShemaTables.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='columns'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputAccess().getColumnsKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getInputAccess().getColumnsColumnCrossReference_5_0());
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getInputAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutputKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='name'
		{
			newLeafNode(otherlv_2, grammarAccess.getOutputAccess().getNameKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getOutputAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='id'
		{
			newLeafNode(otherlv_4, grammarAccess.getOutputAccess().getIdKeyword_4());
		}
		(
			(
				lv_id_5_0=RULE_INT
				{
					newLeafNode(lv_id_5_0, grammarAccess.getOutputAccess().getIdINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='dataType'
		{
			newLeafNode(otherlv_6, grammarAccess.getOutputAccess().getDataTypeKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getDataTypeColumnDataTypeEnumRuleCall_7_0());
				}
				lv_dataType_7_0=ruleColumnDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"dataType",
						lv_dataType_7_0,
						"fr.n7.idm.project.xtext.ShemaTables.ColumnDataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='constraint'
		{
			newLeafNode(otherlv_8, grammarAccess.getOutputAccess().getConstraintKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getConstraintConstraintParserRuleCall_9_0());
				}
				lv_constraint_9_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_9_0,
						"fr.n7.idm.project.xtext.ShemaTables.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Constant'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstantKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getValueKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Rule ColumnDataType
ruleColumnDataType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getColumnDataTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColumnDataTypeAccess().getIntEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='float'
			{
				$current = grammarAccess.getColumnDataTypeAccess().getFloatEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColumnDataTypeAccess().getFloatEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='string'
			{
				$current = grammarAccess.getColumnDataTypeAccess().getStringEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getColumnDataTypeAccess().getStringEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
