/*
 * generated by Xtext 2.32.0
 */
package fr.n7.idm.project.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ShemaTablesGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Tables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameTablesKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cShematablesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cShematablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cShematablesShemaTableParserRuleCall_4_0 = (RuleCall)cShematablesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Tables:
		//    'Tables' name='Tables' '{'
		//        'shematables' shematables+=ShemaTable*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tables' name='Tables' '{'
		//    'shematables' shematables+=ShemaTable*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Tables'
		public Keyword getTablesKeyword_0() { return cTablesKeyword_0; }
		
		//name='Tables'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'Tables'
		public Keyword getNameTablesKeyword_1_0() { return cNameTablesKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'shematables'
		public Keyword getShematablesKeyword_3() { return cShematablesKeyword_3; }
		
		//shematables+=ShemaTable*
		public Assignment getShematablesAssignment_4() { return cShematablesAssignment_4; }
		
		//ShemaTable
		public RuleCall getShematablesShemaTableParserRuleCall_4_0() { return cShematablesShemaTableParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ShemaTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.ShemaTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShemaTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cIdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cColumnsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cColumnsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cColumnsColumnParserRuleCall_7_0 = (RuleCall)cColumnsAssignment_7.eContents().get(0);
		private final Keyword cCatalogueKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCatalogueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCatalogueCatalogueParserRuleCall_9_0 = (RuleCall)cCatalogueAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ShemaTable:
		//    'ShemaTable' '{'
		//        'name' name=ID
		//        'id' id=INT
		//        'columns' columns+=Column*
		//        'catalogue' catalogue=Catalogue
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ShemaTable' '{'
		//    'name' name=ID
		//    'id' id=INT
		//    'columns' columns+=Column*
		//    'catalogue' catalogue=Catalogue
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ShemaTable'
		public Keyword getShemaTableKeyword_0() { return cShemaTableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'id'
		public Keyword getIdKeyword_4() { return cIdKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_6() { return cColumnsKeyword_6; }
		
		//columns+=Column*
		public Assignment getColumnsAssignment_7() { return cColumnsAssignment_7; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_7_0() { return cColumnsColumnParserRuleCall_7_0; }
		
		//'catalogue'
		public Keyword getCatalogueKeyword_8() { return cCatalogueKeyword_8; }
		
		//catalogue=Catalogue
		public Assignment getCatalogueAssignment_9() { return cCatalogueAssignment_9; }
		
		//Catalogue
		public RuleCall getCatalogueCatalogueParserRuleCall_9_0() { return cCatalogueCatalogueParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cIdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cDataTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataTypeColumnDataTypeEnumRuleCall_7_0 = (RuleCall)cDataTypeAssignment_7.eContents().get(0);
		private final Keyword cConstraintKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cConstraintAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConstraintConstraintParserRuleCall_9_0 = (RuleCall)cConstraintAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Column:
		//    'Column' '{'
		//        'name' name=ID
		//        'id' id=INT
		//        'dataType' dataType=ColumnDataType
		//        'constraint' constraint=Constraint
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Column' '{'
		//    'name' name=ID
		//    'id' id=INT
		//    'dataType' dataType=ColumnDataType
		//    'constraint' constraint=Constraint
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'id'
		public Keyword getIdKeyword_4() { return cIdKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_6() { return cDataTypeKeyword_6; }
		
		//dataType=ColumnDataType
		public Assignment getDataTypeAssignment_7() { return cDataTypeAssignment_7; }
		
		//ColumnDataType
		public RuleCall getDataTypeColumnDataTypeEnumRuleCall_7_0() { return cDataTypeColumnDataTypeEnumRuleCall_7_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_8() { return cConstraintKeyword_8; }
		
		//constraint=Constraint
		public Assignment getConstraintAssignment_9() { return cConstraintAssignment_9; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_9_0() { return cConstraintConstraintParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ReferencedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.ReferencedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferencedColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cIdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cDataTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataTypeColumnDataTypeEnumRuleCall_7_0 = (RuleCall)cDataTypeAssignment_7.eContents().get(0);
		private final Keyword cConstraintKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cConstraintAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConstraintConstraintParserRuleCall_9_0 = (RuleCall)cConstraintAssignment_9.eContents().get(0);
		private final Keyword cForeignTableKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cForeignTableAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cForeignTableShemaTableCrossReference_11_0 = (CrossReference)cForeignTableAssignment_11.eContents().get(0);
		private final RuleCall cForeignTableShemaTableIDTerminalRuleCall_11_0_1 = (RuleCall)cForeignTableShemaTableCrossReference_11_0.eContents().get(1);
		private final Keyword cForeignColumnKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cForeignColumnAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final CrossReference cForeignColumnColumnCrossReference_13_0 = (CrossReference)cForeignColumnAssignment_13.eContents().get(0);
		private final RuleCall cForeignColumnColumnIDTerminalRuleCall_13_0_1 = (RuleCall)cForeignColumnColumnCrossReference_13_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//ReferencedColumn:
		//    'ReferencedColumn' '{'
		//        'name' name=ID
		//        'id' id=INT
		//        'dataType' dataType=ColumnDataType
		//        'constraint' constraint=Constraint
		//        'foreignTable' foreignTable=[ShemaTable|ID]
		//        'foreignColumn' foreignColumn=[Column|ID]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReferencedColumn' '{'
		//    'name' name=ID
		//    'id' id=INT
		//    'dataType' dataType=ColumnDataType
		//    'constraint' constraint=Constraint
		//    'foreignTable' foreignTable=[ShemaTable|ID]
		//    'foreignColumn' foreignColumn=[Column|ID]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ReferencedColumn'
		public Keyword getReferencedColumnKeyword_0() { return cReferencedColumnKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'id'
		public Keyword getIdKeyword_4() { return cIdKeyword_4; }
		
		//id=INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_6() { return cDataTypeKeyword_6; }
		
		//dataType=ColumnDataType
		public Assignment getDataTypeAssignment_7() { return cDataTypeAssignment_7; }
		
		//ColumnDataType
		public RuleCall getDataTypeColumnDataTypeEnumRuleCall_7_0() { return cDataTypeColumnDataTypeEnumRuleCall_7_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_8() { return cConstraintKeyword_8; }
		
		//constraint=Constraint
		public Assignment getConstraintAssignment_9() { return cConstraintAssignment_9; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_9_0() { return cConstraintConstraintParserRuleCall_9_0; }
		
		//'foreignTable'
		public Keyword getForeignTableKeyword_10() { return cForeignTableKeyword_10; }
		
		//foreignTable=[ShemaTable|ID]
		public Assignment getForeignTableAssignment_11() { return cForeignTableAssignment_11; }
		
		//[ShemaTable|ID]
		public CrossReference getForeignTableShemaTableCrossReference_11_0() { return cForeignTableShemaTableCrossReference_11_0; }
		
		//ID
		public RuleCall getForeignTableShemaTableIDTerminalRuleCall_11_0_1() { return cForeignTableShemaTableIDTerminalRuleCall_11_0_1; }
		
		//'foreignColumn'
		public Keyword getForeignColumnKeyword_12() { return cForeignColumnKeyword_12; }
		
		//foreignColumn=[Column|ID]
		public Assignment getForeignColumnAssignment_13() { return cForeignColumnAssignment_13; }
		
		//[Column|ID]
		public CrossReference getForeignColumnColumnCrossReference_13_0() { return cForeignColumnColumnCrossReference_13_0; }
		
		//ID
		public RuleCall getForeignColumnColumnIDTerminalRuleCall_13_0_1() { return cForeignColumnColumnIDTerminalRuleCall_13_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class DerivedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.DerivedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDerivedColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cIdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cDataTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataTypeColumnDataTypeEnumRuleCall_7_0 = (RuleCall)cDataTypeAssignment_7.eContents().get(0);
		private final Keyword cConstraintKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cConstraintAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConstraintConstraintParserRuleCall_9_0 = (RuleCall)cConstraintAssignment_9.eContents().get(0);
		private final Keyword cAlgorithmKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAlgorithmAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAlgorithmAlgorithmParserRuleCall_11_0 = (RuleCall)cAlgorithmAssignment_11.eContents().get(0);
		private final Keyword cOutputColumnKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cOutputColumnAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cOutputColumnOutputParserRuleCall_13_0 = (RuleCall)cOutputColumnAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//DerivedColumn:
		//    'DerivedColumn' '{'
		//        'name' name=ID
		//        'id' id= INT
		//        'dataType' dataType=ColumnDataType
		//        'constraint' constraint=Constraint
		//        'algorithm' algorithm=Algorithm
		//        'outputColumn' outputColumn=Output
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DerivedColumn' '{'
		//    'name' name=ID
		//    'id' id= INT
		//    'dataType' dataType=ColumnDataType
		//    'constraint' constraint=Constraint
		//    'algorithm' algorithm=Algorithm
		//    'outputColumn' outputColumn=Output
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DerivedColumn'
		public Keyword getDerivedColumnKeyword_0() { return cDerivedColumnKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'id'
		public Keyword getIdKeyword_4() { return cIdKeyword_4; }
		
		//id= INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_6() { return cDataTypeKeyword_6; }
		
		//dataType=ColumnDataType
		public Assignment getDataTypeAssignment_7() { return cDataTypeAssignment_7; }
		
		//ColumnDataType
		public RuleCall getDataTypeColumnDataTypeEnumRuleCall_7_0() { return cDataTypeColumnDataTypeEnumRuleCall_7_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_8() { return cConstraintKeyword_8; }
		
		//constraint=Constraint
		public Assignment getConstraintAssignment_9() { return cConstraintAssignment_9; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_9_0() { return cConstraintConstraintParserRuleCall_9_0; }
		
		//'algorithm'
		public Keyword getAlgorithmKeyword_10() { return cAlgorithmKeyword_10; }
		
		//algorithm=Algorithm
		public Assignment getAlgorithmAssignment_11() { return cAlgorithmAssignment_11; }
		
		//Algorithm
		public RuleCall getAlgorithmAlgorithmParserRuleCall_11_0() { return cAlgorithmAlgorithmParserRuleCall_11_0; }
		
		//'outputColumn'
		public Keyword getOutputColumnKeyword_12() { return cOutputColumnKeyword_12; }
		
		//outputColumn=Output
		public Assignment getOutputColumnAssignment_13() { return cOutputColumnAssignment_13; }
		
		//Output
		public RuleCall getOutputColumnOutputParserRuleCall_13_0() { return cOutputColumnOutputParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFilePathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilePathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_3_0 = (RuleCall)cFilePathAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//    'Constraint' '{'
		//        'filePath' filePath=STRING
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Constraint' '{'
		//    'filePath' filePath=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'filePath'
		public Keyword getFilePathKeyword_2() { return cFilePathKeyword_2; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_3() { return cFilePathAssignment_3; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_3_0() { return cFilePathSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CatalogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Catalogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatalogueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cAlgorithmsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAlgorithmsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAlgorithmsAlgorithmParserRuleCall_5_0 = (RuleCall)cAlgorithmsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Catalogue:
		//    'Catalogue' '{'
		//        'name' name=ID
		//        'algorithms' algorithms+=Algorithm*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Catalogue' '{'
		//    'name' name=ID
		//    'algorithms' algorithms+=Algorithm*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Catalogue'
		public Keyword getCatalogueKeyword_0() { return cCatalogueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'algorithms'
		public Keyword getAlgorithmsKeyword_4() { return cAlgorithmsKeyword_4; }
		
		//algorithms+=Algorithm*
		public Assignment getAlgorithmsAssignment_5() { return cAlgorithmsAssignment_5; }
		
		//Algorithm
		public RuleCall getAlgorithmsAlgorithmParserRuleCall_5_0() { return cAlgorithmsAlgorithmParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AlgorithmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cPathKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPathSTRINGTerminalRuleCall_5_0 = (RuleCall)cPathAssignment_5.eContents().get(0);
		private final Keyword cOutputKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutputOutputParserRuleCall_7_0 = (RuleCall)cOutputAssignment_7.eContents().get(0);
		private final Keyword cInputKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cInputAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInputInputParserRuleCall_9_0 = (RuleCall)cInputAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Algorithm:
		//    'Algorithm' '{'
		//        'name' name=ID
		//        'path' path=STRING
		//        'output' output=Output
		//        'input' input=Input
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Algorithm' '{'
		//    'name' name=ID
		//    'path' path=STRING
		//    'output' output=Output
		//    'input' input=Input
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'path'
		public Keyword getPathKeyword_4() { return cPathKeyword_4; }
		
		//path=STRING
		public Assignment getPathAssignment_5() { return cPathAssignment_5; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_5_0() { return cPathSTRINGTerminalRuleCall_5_0; }
		
		//'output'
		public Keyword getOutputKeyword_6() { return cOutputKeyword_6; }
		
		//output=Output
		public Assignment getOutputAssignment_7() { return cOutputAssignment_7; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_7_0() { return cOutputOutputParserRuleCall_7_0; }
		
		//'input'
		public Keyword getInputKeyword_8() { return cInputKeyword_8; }
		
		//input=Input
		public Assignment getInputAssignment_9() { return cInputAssignment_9; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_9_0() { return cInputInputParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConstanteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstanteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstanteConstantParserRuleCall_3_0 = (RuleCall)cConstanteAssignment_3.eContents().get(0);
		private final Keyword cColumnsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cColumnsColumnCrossReference_5_0 = (CrossReference)cColumnsAssignment_5.eContents().get(0);
		private final RuleCall cColumnsColumnIDTerminalRuleCall_5_0_1 = (RuleCall)cColumnsColumnCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Input:
		//    'Input' '{'
		//        'constante' constante=Constant
		//        'columns' columns+=[Column|ID]*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Input' '{'
		//    'constante' constante=Constant
		//    'columns' columns+=[Column|ID]*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'constante'
		public Keyword getConstanteKeyword_2() { return cConstanteKeyword_2; }
		
		//constante=Constant
		public Assignment getConstanteAssignment_3() { return cConstanteAssignment_3; }
		
		//Constant
		public RuleCall getConstanteConstantParserRuleCall_3_0() { return cConstanteConstantParserRuleCall_3_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_4() { return cColumnsKeyword_4; }
		
		//columns+=[Column|ID]*
		public Assignment getColumnsAssignment_5() { return cColumnsAssignment_5; }
		
		//[Column|ID]
		public CrossReference getColumnsColumnCrossReference_5_0() { return cColumnsColumnCrossReference_5_0; }
		
		//ID
		public RuleCall getColumnsColumnIDTerminalRuleCall_5_0_1() { return cColumnsColumnIDTerminalRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cIdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdINTTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Keyword cDataTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataTypeColumnDataTypeEnumRuleCall_7_0 = (RuleCall)cDataTypeAssignment_7.eContents().get(0);
		private final Keyword cConstraintKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cConstraintAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConstraintConstraintParserRuleCall_9_0 = (RuleCall)cConstraintAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Output:
		//    'Output' '{'
		//        'name' name=ID
		//        'id' id= INT
		//        'dataType' dataType=ColumnDataType
		//        'constraint' constraint=Constraint
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Output' '{'
		//    'name' name=ID
		//    'id' id= INT
		//    'dataType' dataType=ColumnDataType
		//    'constraint' constraint=Constraint
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'id'
		public Keyword getIdKeyword_4() { return cIdKeyword_4; }
		
		//id= INT
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_5_0() { return cIdINTTerminalRuleCall_5_0; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_6() { return cDataTypeKeyword_6; }
		
		//dataType=ColumnDataType
		public Assignment getDataTypeAssignment_7() { return cDataTypeAssignment_7; }
		
		//ColumnDataType
		public RuleCall getDataTypeColumnDataTypeEnumRuleCall_7_0() { return cDataTypeColumnDataTypeEnumRuleCall_7_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_8() { return cConstraintKeyword_8; }
		
		//constraint=Constraint
		public Assignment getConstraintAssignment_9() { return cConstraintAssignment_9; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_9_0() { return cConstraintConstraintParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//    'Constant' '{'
		//        'value' value= INT
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Constant' '{'
		//    'value' value= INT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Constant'
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value= INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class ColumnDataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.idm.project.xtext.ShemaTables.ColumnDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFloatFloatKeyword_1_0 = (Keyword)cFloatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStringStringKeyword_2_0 = (Keyword)cStringEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ColumnDataType:
		//    int = "int" | float = "float" | string = "string"
		//;
		public EnumRule getRule() { return rule; }
		
		//int = "int" | float = "float" | string = "string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int = "int"
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		//"int"
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//float = "float"
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_1() { return cFloatEnumLiteralDeclaration_1; }
		
		//"float"
		public Keyword getFloatFloatKeyword_1_0() { return cFloatFloatKeyword_1_0; }
		
		//string = "string"
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_2() { return cStringEnumLiteralDeclaration_2; }
		
		//"string"
		public Keyword getStringStringKeyword_2_0() { return cStringStringKeyword_2_0; }
	}
	
	private final TablesElements pTables;
	private final ShemaTableElements pShemaTable;
	private final ColumnElements pColumn;
	private final ReferencedColumnElements pReferencedColumn;
	private final DerivedColumnElements pDerivedColumn;
	private final ConstraintElements pConstraint;
	private final CatalogueElements pCatalogue;
	private final AlgorithmElements pAlgorithm;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final ConstantElements pConstant;
	private final ColumnDataTypeElements eColumnDataType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ShemaTablesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTables = new TablesElements();
		this.pShemaTable = new ShemaTableElements();
		this.pColumn = new ColumnElements();
		this.pReferencedColumn = new ReferencedColumnElements();
		this.pDerivedColumn = new DerivedColumnElements();
		this.pConstraint = new ConstraintElements();
		this.pCatalogue = new CatalogueElements();
		this.pAlgorithm = new AlgorithmElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pConstant = new ConstantElements();
		this.eColumnDataType = new ColumnDataTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.idm.project.xtext.ShemaTables".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Tables:
	//    'Tables' name='Tables' '{'
	//        'shematables' shematables+=ShemaTable*
	//    '}';
	public TablesElements getTablesAccess() {
		return pTables;
	}
	
	public ParserRule getTablesRule() {
		return getTablesAccess().getRule();
	}
	
	//ShemaTable:
	//    'ShemaTable' '{'
	//        'name' name=ID
	//        'id' id=INT
	//        'columns' columns+=Column*
	//        'catalogue' catalogue=Catalogue
	//    '}';
	public ShemaTableElements getShemaTableAccess() {
		return pShemaTable;
	}
	
	public ParserRule getShemaTableRule() {
		return getShemaTableAccess().getRule();
	}
	
	//Column:
	//    'Column' '{'
	//        'name' name=ID
	//        'id' id=INT
	//        'dataType' dataType=ColumnDataType
	//        'constraint' constraint=Constraint
	//    '}';
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//ReferencedColumn:
	//    'ReferencedColumn' '{'
	//        'name' name=ID
	//        'id' id=INT
	//        'dataType' dataType=ColumnDataType
	//        'constraint' constraint=Constraint
	//        'foreignTable' foreignTable=[ShemaTable|ID]
	//        'foreignColumn' foreignColumn=[Column|ID]
	//    '}';
	public ReferencedColumnElements getReferencedColumnAccess() {
		return pReferencedColumn;
	}
	
	public ParserRule getReferencedColumnRule() {
		return getReferencedColumnAccess().getRule();
	}
	
	//DerivedColumn:
	//    'DerivedColumn' '{'
	//        'name' name=ID
	//        'id' id= INT
	//        'dataType' dataType=ColumnDataType
	//        'constraint' constraint=Constraint
	//        'algorithm' algorithm=Algorithm
	//        'outputColumn' outputColumn=Output
	//    '}';
	public DerivedColumnElements getDerivedColumnAccess() {
		return pDerivedColumn;
	}
	
	public ParserRule getDerivedColumnRule() {
		return getDerivedColumnAccess().getRule();
	}
	
	//Constraint:
	//    'Constraint' '{'
	//        'filePath' filePath=STRING
	//    '}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Catalogue:
	//    'Catalogue' '{'
	//        'name' name=ID
	//        'algorithms' algorithms+=Algorithm*
	//    '}';
	public CatalogueElements getCatalogueAccess() {
		return pCatalogue;
	}
	
	public ParserRule getCatalogueRule() {
		return getCatalogueAccess().getRule();
	}
	
	//Algorithm:
	//    'Algorithm' '{'
	//        'name' name=ID
	//        'path' path=STRING
	//        'output' output=Output
	//        'input' input=Input
	//    '}';
	public AlgorithmElements getAlgorithmAccess() {
		return pAlgorithm;
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//Input:
	//    'Input' '{'
	//        'constante' constante=Constant
	//        'columns' columns+=[Column|ID]*
	//    '}';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//    'Output' '{'
	//        'name' name=ID
	//        'id' id= INT
	//        'dataType' dataType=ColumnDataType
	//        'constraint' constraint=Constraint
	//    '}';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Constant:
	//    'Constant' '{'
	//        'value' value= INT
	//    '}';
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//enum ColumnDataType:
	//    int = "int" | float = "float" | string = "string"
	//;
	public ColumnDataTypeElements getColumnDataTypeAccess() {
		return eColumnDataType;
	}
	
	public EnumRule getColumnDataTypeRule() {
		return getColumnDataTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
